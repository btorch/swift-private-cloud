@version: 3.2
@include "scl.conf"

#
# Syslog-ng configuration file
#
########################
# Global Options
########################
# First, set some global options.
options {
        # disable the chained hostname format in logs
        # (default is enabled)
        chain_hostnames(no); 

        # the time to wait before a died connection is re-established
        # (default is 60)
        time_reopen(30);

        # the time to wait before an idle destination file is closed
        # (default is 60)
        time_reap(60);

        # the number of lines fitting in the output queue
        # (default is 2048)
        log_fifo_size(4096);

        # enable or disable directory creation for destination files
        create_dirs(yes);

        # default owner, group, and permissions for log files
        # (defaults are 0, 0, 0600)
        owner(root);
        group(adm);
        perm(0640);

        # default owner, group, and permissions for created directories
        # (defaults are 0, 0, 0700)
        dir_owner(root);
        dir_group(root);
        dir_perm(0755);

        # enable or disable DNS usage
        # syslog-ng blocks on DNS queries, so enabling DNS may lead to
        # a Denial of Service attack
        # (default is yes)
        use_dns(no);

        # maximum length of message in bytes
        # this is only limited by the program listening on the /dev/log Unix
        # socket, glibc can handle arbitrary length log messages, but -- for
        # example -- syslogd accepts only 1024 bytes
        # (default is 2048)
        log_msg_size(2048);

        # The maximum number of messages fetched from a source during a single poll loop.
        # The destination queues might fill up before flow-control could
        # stop reading if log_fetch_limit() is too high.
        # (defaults to 10)
        log_fetch_limit(20);

        # Disable statistic log messages.
        # log stats every 60 seconds 
        stats_freq(600);

        # Some program send log messages through a private implementation.
        # and sometimes that implementation is bad. If this happen syslog-ng
        # may recognise the program name as hostname. Whit this option
        # we tell the syslog-ng that if a hostname match this regexp than that
        # is not a real hostname.
        bad_hostname("^gconfd$");

        # Specifies how many lines are flushed to a destination at a time.
        # Syslog-ng waits for this number of lines to accumulate and sends them
        # off in a single batch. Setting this number high increases throughput as fully
        # filled frames are sent to the network, but also increases message latency.
        # The latency can be limited by the use of the flush_timeout option.
        flush_lines (0);

        # long_hostnames (off);

        # Add Fully Qualified Domain Name instead of short hostname.
        # This option can be specified globally, and per-source as well.
        # The local setting of the source overrides the global option if available.
        use_fqdn (no);

        # Hostname rewriting
        keep_hostname (yes);
};


########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src {
        # Automatically detects which platform syslog-ng OSE is running on,
        # and collects the native log messages of that platform.
        # /usr/share/syslog-ng/include/scl/system/generate-system-source.sh
        # script handles system(), and expands it into all the other things.
        # Useful for basic setups
        # system();

        # Listens for incoming messages using the new IETF-standard syslog protocol.
        syslog(flags("no-multi-line"));

        # message generated by Syslog-NG
        internal();

        # standard Linux log source (this is the default place for the syslog()
        # function to send logs to)
        unix-stream("/dev/log" flags("no-multi-line") max-connections(1000));

        # messages from the kernel
        file("/proc/kmsg" program-override("kernel") flags(kernel));

        # use the following line if you want to receive remote UDP logging messages
        # (this is equivalent to the "-r" syslogd flag)
        #udp();

        # use the following line if you want to receive remote TCP logging messages
        tcp(ip("0.0.0.0") port(514) max-connections(1000) log_iw_size(400000) log_fetch_limit(100));
};



########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file("/var/log/auth.log"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_mail { file("/var/log/mail.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file("/var/log/mail/mail.info"); };
destination d_mailwarn { file("/var/log/mail/mail.warn"); };
destination d_mailerr { file("/var/log/mail/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

# Some `catch-all' logfiles.
#
destination d_debug { file("/var/log/debug"); };
destination d_error { file("/var/log/error"); };
destination d_messages { file("/var/log/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Everyones's console
# this will send messages to everyone logged in
destination du_all { usertty("*"); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

##############################
# SWIFT LOGGING DESTINATIONS
# 
# Swift Proxy
destination d_healthchk { file("/var/log/swift/healthchk.log"); };
destination d_local0 { file("/var/log/swift/proxy.log"); };
destination d_local0_err { file("/var/log/swift/proxy.error"); };

# Swift Object, Container, Account
destination d_local1 { file("/var/log/swift/storage.log"); };
destination d_local1_err { file("/var/log/swift/storage.error"); };
destination d_local2 { file("/var/log/swift/jobs.log"); };
destination d_local2_err { file("/var/log/swift/jobs.error"); };

# Swift Drive Audits
destination d_local3 { file("/var/log/swift/drive-audit.log"); };
destination d_local3_err { file("/var/log/swift/drive-audit.error"); };

# Swift Object Expirer 
destination d_local4 { file("/var/log/swift/swift-object-expirer.log"); };
destination d_local4_err { file("/var/log/swift/swift-object-expirer.error"); };


########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

# all messages from the auth and authpriv facilities
filter f_auth { facility(auth, authpriv) and not filter(f_debug); };

# all messages except from the auth, authpriv and local0-7 facilities
filter f_syslog {
        not facility(auth, authpriv, mail, local0, local1, local2, local3, local4, local5, local6, local7); };

# all messages of info, notice, or warn priority not coming form the auth,
# authpriv, cron, daemon, mail, news and local0-7 facilities
filter f_messages {
        level(info,notice,warn)
            and not facility(auth,authpriv,cron,daemon,mail,news,local0,local1,local2,local3,local4,local5,local6,local7);
};

# all messages of priority debug not coming from the auth, authpriv, news, and
# mail facilities
filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };

filter f_error { 
        level(err .. emerg)
            and not facility(local0,local1,local2,local3,local4,local5,local6,local7);
};

filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug); };
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

#######################################
# SWIFT LOGGING FILTERS
#
# Swift Proxy
filter f_local0 { facility(local0) and level(info,debug) and
            not ( match("GET /healthcheck HTTP/1.0" value("MSG")))
                or match("GET /healthcheck HTTP/1.1" value("MSG"))
                or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.1" value("MSG"))
                or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.0" value("MSG")); };

filter f_local0_err { facility(local0) and not level(info,debug) and
            not ( match("GET /healthcheck HTTP/1.0" value("MSG"))
                or match("GET /healthcheck HTTP/1.1" value("MSG"))
                or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.1" value("MSG"))
                or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.0" value("MSG"))); };

filter f_healthchk { match("GET /healthcheck HTTP/1.0" value("MSG"))
            or match("GET /healthcheck HTTP/1.1" value("MSG"))
            or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.1" value("MSG"))
            or match("GET /lbstats%3Bcsv%3Bnorefresh HTTP/1.0" value("MSG")); };

# Swift Object, Container, Account
filter f_local1 { facility(local1) and level(info,debug); };
filter f_local1_err { facility(local1) and not level(info,debug); };
filter f_local2 { facility(local2) and level(info,debug); };
filter f_local2_err { facility(local2) and not level(info,debug); };

# Swift drive Audits
filter f_local3 { facility(local3) and level(info,debug); };
filter f_local3_err { facility(local3) and not level(info,debug); };

# Swift Object Expirer
filter f_local4 { facility(local4) and level(info,debug); };
filter f_local4_err { facility(local4) and not level(info,debug); };



########################
# Log paths
########################
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };

###############################
# SWIFT LOGGING
#
log { source(s_src); filter(f_healthchk); destination(d_healthchk); };
log { source(s_src); filter(f_local0); destination(d_local0);  };
log { source(s_src); filter(f_local0_err); destination(d_local0_err);  };
log { source(s_src); filter(f_local1); destination(d_local1);  };
log { source(s_src); filter(f_local1_err); destination(d_local1_err);  };
log { source(s_src); filter(f_local2); destination(d_local2);  };
log { source(s_src); filter(f_local2_err); destination(d_local2_err);  };
log { source(s_src); filter(f_local3); destination(d_local3);  };
log { source(s_src); filter(f_local3_err); destination(d_local3_err);  };
log { source(s_src); filter(f_local4); destination(d_local4);  };
log { source(s_src); filter(f_local4_err); destination(d_local4_err);  };


###
# Include all config files in /etc/syslog-ng/conf.d/
###
# vim:ft=syslog-ng:ai:si:ts=4:sw=4:et:
@include "/etc/syslog-ng/conf.d/"

